<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, February 22, 2016, 6:31 AM -->
<!-- MuClient version 4.94 -->

<!-- Plugin "Galabans_Ship_Stacker" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Galabans_Ship_Stacker"
   author="Galaban"
   id="41d667ef6fa9986ec4eac582"
   language="Lua"
   purpose="Improve ship display"
   save_state="y"
   date_written="2016-02-22 06:29:19"
   requires="4.50"
   version="1.0"
   >
<description trim="y">
<![CDATA[
This plugin stacks the ships so that they are more easily readable.  
]]>
</description>

</plugin>


<!--  Aliases -->

<aliases>
  <alias
   match="^shipstack(er)? (.+)$"
   regexp="y"
   enabled="y"
   expand_variables="y"
   sequence="100"
   script="formatShipStack"
  >
  </alias>
  <alias
   match="^shipstack(er)?$"
   regexp="y"
   enabled="y"
   expand_variables="y"
   sequence="100"
   script="helpShipStack"
  >
  </alias>
</aliases>


<!--  Triggers  -->

<triggers>

    <!-- Standard ship list, 2 per line -->
    <trigger expand_variables="y" group="captureTriggers" 
        match="^[\w\s\d\-]+(\'[\w\s\d\-]+\')(\s*)([\w\s\d\-]+)(\'[\w\s\d\-]+\')(\s*)$" enabled="n" regexp="y" keep_evaluating="y" 
        match_text_colour="y" text_colour="14" 
        omit_from_output="y" omit_from_log="y" 
        send_to="12" sequence="10">
    <send>grabShips("%0")</send>
    </trigger>

    <!-- Ship launching (Note: no color match, but must have "[Launching]" in the text. -->
    <trigger expand_variables="y" group="captureTriggers" 
        match="^\[Launching\][\w\s\d\-]+(\'[\w\s\d\-]+\')(\s*)(\[Launching\])?([\w\s\d\-]+)(\'[\w\s\d\-]+\')(\s*)$" enabled="n" regexp="y" keep_evaluating="y" 
        match_text_colour="n" text_colour="14" 
        omit_from_output="y" omit_from_log="y" 
        send_to="12" sequence="10">
    <send>grabShips("%0")</send>
    </trigger>

    <!-- Single ship -->
    <trigger expand_variables="y" group="captureTriggers" 
        match="^[\w\s\d\[\].-]+(\'[\w\s\d\[\].-]+\')(\s*)$" enabled="n" regexp="y" keep_evaluating="y" 
        match_text_colour="y" text_colour="14" 
        omit_from_output="y" omit_from_log="y"
        send_to="12" sequence="11">
    <send>grabShip("%0")</send>
    </trigger>

    <!-- Stop grabbing -->
	<trigger script="stopGrabbing" match="^$" enabled="n" regexp="y" group="endCaptures" name="endCaptureNewLine" sequence="10" />
	<trigger script="stopGrabbingNoShip" match="^[^\']+$" enabled="n" regexp="y" omit_from_output="y" omit_from_log="y" 
            group="endCaptures" name="endCaptureNoShip" sequence="11" />

    <!-- On the pad -->
	<trigger script="obviousExits" match="^Obvious exits\:$" enabled="y" regexp="y"  sequence="10" group="startCaptures" />

    <!-- In Space -->
	<trigger script="shipsInSpace" match="^Through the transparisteel windows you see\:$" enabled="y" regexp="y"  sequence="10" group="startCaptures" />

    <!-- Scanning -->
    <trigger script="scanning" match="^Scanning .*\.\.\.$" enabled="y" regexp="y"  sequence="10" group="startCaptures" />

</triggers>

<!--  Script  -->

<script>
<![CDATA[

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--                              NOTES
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--  [I]
--      ADDING MORE FORMATS REQUIRES CHANGES HERE:
--      OnPluginInstall(), helpShipStack(), formatShipStack(), and displayShips()


------------------------------
-- Global Variables
dofile(GetPluginInfo(GetPluginID(), 20) .. "lotj_colors.lua")

local shipstackFormat = tonumber(GetVariable("shipstackFormat") or "1")
local shipstackEnabled = GetVariable("shipstackEnabled") or "true"

local shipList = {}
local countShips = 0

------------------------------
-- Global Constants

local b_red = ANSI(1)..ANSI(31)
local d_red = ANSI(22)..ANSI(31)
local b_green = ANSI(1)..ANSI(32)
local d_green = ANSI(1)..ANSI(32)
local b_yellow = ANSI(1)..ANSI(33)
local d_yellow = ANSI(22)..ANSI(33)
local b_cyan = ANSI(1)..ANSI(36)
local d_cyan = ANSI(22)..ANSI(36)
local b_white = ANSI(1)..ANSI(37)
local d_white = ANSI(22)..ANSI(37)

local colorList = {b_cyan,b_white,d_cyan,b_green,b_yellow,d_green,d_yellow}
local numColors = 7
local currColorIndx = 1

-----------------------------
--  Plugin/State Processing
function OnPluginSaveState()
    SetVariable("shipstackFormat", shipstackFormat)
    SetVariable("shipstackEnabled", shipstackEnabled)
end

function OnPluginInstall()
    -- This is from loading
    if (shipstackEnabled == "false") then 
        disableShipStacking()
        Note("")
        AnsiNote(b_red .. "     Galaban's Ship Stacker is currently disabled.")
        AnsiNote(b_red .. "            Ships will not be stacked.")
        AnsiNote(b_white.."    Use 'shipstacker enable' to enable the plugin.")
        Note("")
    else
        if (shipstackEnabled ~= "true") then
            if (shipstackEnabled ~= nil) then
                Note("")
                AnsiNote(b_red.."[ERROR LOADING Galaban's Ship Stacker].")
                AnsiNote(b_red.."Unexpected value for 'Enabled' found.  Defaulting to true")
            end
            shipstackEnabled = "true"
            OnPluginSaveState()
        end
        enableShipStacking() -- sanity check
    end

    if (shipstackFormat ~= 1 and shipstackFormat ~= 2 and shipstackFormat ~= 3) then
        if (shipstackFormat ~= nil) then
            Note("")
            AnsiNote(b_red.."[ERROR LOADING Galaban's Ship Stacker].")
            AnsiNote(b_red.."Unexpected ship format found.  Defaulting to format 1")
        end
        shipstackFormat = 1
        OnPluginSaveState()
    end

end

-----------------------------
--  Utility Functions
function nextColor()
    local nextVal = colorList[currColorIndx]
    currColorIndx = currColorIndx + 1
    if (currColorIndx >= numColors) then
        resetColor()
    end
    return nextVal
end

function resetColor()
    currColorIndx = 1
end

function trim(s)
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function spairs(t, order)
    -- collect the keys
    local keys = {}
    for k in pairs(t) do keys[#keys+1] = k end

    -- if order function given, sort by it by passing the table and keys a, b,
    -- otherwise just sort the keys 
    if order then
        table.sort(keys, function(a,b) return order(t, a, b) end)
    else
        table.sort(keys)
    end

    -- return the iterator function
    local i = 0
    return function()
        i = i + 1
        if keys[i] then
            return keys[i], t[keys[i]]
        end
    end
end

function clearList()
    shipList = {}

    count = #shipList
    for i=0, count do shipList[i]=nil end

    countShips = 0
end

-----------------------------
--  Enable/Disable functions
function disableShipStacking()
    EnableTriggerGroup("startCaptures",false)
end

function enableShipStacking()
    EnableTriggerGroup("startCaptures",true)
end

-----------------------------
--  Alias Handlers
function helpShipStack()
    AnsiNote(b_green.."----------------------------------------------------------------------")
    AnsiNote(b_white.."               Galaban's Ship Stacker")
    AnsiNote(b_white.."This plugin will take the ships on the pad and stack them, making the")
    AnsiNote(b_white.."landing pads far more readable.  There are a few different formats to")
    AnsiNote(b_white.."use for this stacking.  Each successive format reduces the amount of")
    AnsiNote(b_white.."information displayed:")
    Note("")
    AnsiNote(b_red .. "shipstacker 1"..b_white..":  Display types and names of the ships (sorted)")
    AnsiNote(b_red .. "shipstacker 2"..b_white..":  Display ship types, with the count of that type")
    AnsiNote(b_red .. "shipstacker 3"..b_white..":  Display the total count of ships")
    Note("")
    AnsiNote(b_red .. "shipstacker disable"..b_white..":  Disable the ship stacker (normal mud output)")
    AnsiNote(b_red .. "shipstacker enable"..b_white..":  Umm...enable the ship stacker")
    AnsiNote(b_green.."----------------------------------------------------------------------")
end

function formatShipStack(rName, rLine, rWildcards, rStyles)
    local opt = string.sub(rWildcards[2], 1, 1)
    local dosave = false
    local outCol = b_yellow

    

    if (opt == "1" or opt == "2" or opt == "3") then
        local iVal = tonumber(opt)
        if (shipstackFormat ~= iVal) then
            dosave = true
            shipstackFormat = iVal
        end
        AnsiNote(outCol.."Ship format set to "..opt)
        if (opt == "1") then AnsiNote(outCol.."Ships names will now be shown along with their type.") end
        if (opt == "2") then AnsiNote(outCol.."Types of ship will now be shown along with their count, but without the names.") end
        if (opt == "3") then AnsiNote(outCol.."Only the total count of ships will be shown.") end
    elseif (string.lower(opt) == "e") then
        if (shipstackEnabled ~= "true") then
            dosave = true
            shipstackEnabled = "true"
        end
        enableShipStacking()
        AnsiNote(b_green.."Galaban's Ship Stacker enabled.")
    elseif (string.lower(opt) == "d") then
        if (shipstackEnabled ~= "false") then
            dosave = true
            shipstackEnabled = "false"
        end
        disableShipStacking()
        AnsiNote(b_red.."Galaban's Ship Stacker disabled.")
    else
        AnsiNote(outCol.."Unknown Option..")
        Note("")
        helpShipStack()
    end

    -- Finally, if we made changes, Save the state
    if (dosave) then
        OnPluginSaveState()
    end
end

-----------------------------
--  Trigger Handlers
local amScanning = false
function obviousExits()
    amScanning = false
    startCapture()
end

function scanning()
    amScanning = true
    startCapture()
end

function shipsInSpace()
    --Yeah, I don't really care right now because so far, the most I've seen in space is six or so...
    amScanning = false
end

function stopGrabbing()
    EnableTriggerGroup("captureTriggers",false)
    EnableTriggerGroup("endCaptures",false)
    displayShips()
end

function stopGrabbingNoShip(rName, rLine, rWildcards, rStyles)
    displayShips()

    -- If we are scanning, the next room over may have more ships. (triggers will stop it if not)
    -- If we are not scanning, we need to stop looking for ships
    if (amScanning) then 
        startCapture()
    else
        stopGrabbing()
    end

    Note("")    -- add a blank line
    AnsiNote(stylesToANSI(rStyles))
end


-----------------------------
--  Ship Processing Functions

function startCapture()
    clearList()
    resetColor()

    EnableTriggerGroup("captureTriggers",true)
    EnableTrigger("endCaptureNewLine",true)
end


function addShip(shipType, shipName)

    if (shipList[shipType] == nil) then shipList[shipType] = {} end
    if (shipList[shipType][shipName] == nil) then
        shipList[shipType][shipName] = true
        countShips = countShips + 1
    end
end

function parseShip(startIndex, triggeredLine)
    local fullstr = triggeredLine
    local ind = startIndex
    local len = string.len(fullstr)
    if (len < 5) then
       return
    end

    --  Loop through each character and look for the paranetheses.  
    --  Once we find it, to the left is the ship type, to the right is the name
    local loop = true
    local found = false
    local typeIndex = ind
    local nameIndex = ind+1
    while loop do
        ind = ind + 1
        if (ind >= len) then
            loop = false
        end
        if (fullstr:sub(ind, ind) == "'") then
            if( found == true) then
                loop = false
                nameIndex = ind
            else
                found = true
                typeIndex = ind
            end
        end
    end
    
    shipType = trim(fullstr:sub(startIndex, typeIndex-1))
    shipName = fullstr:sub(typeIndex+1, nameIndex-1)

    if (shipType:sub(1,1) == "[") then
        local endIndx = string.find(shipType, "]")
        local stripItem = shipType:sub(0,endIndx)
        shipType = shipType:sub(endIndx+1)
        shipType = trim(shipType)
        shipName = shipName .. " "..b_red..stripItem
    end

    return shipType, shipName, ind+1
end

--  Parse single ship in a text line
function grabShip(triggeredLine)

    EnableTrigger("endCaptureNoShip",true)

    --Check to see if we hit a rare condition where (A) a cyan colored mob 
    --(B) asks or tells us something (C) directly after the room inventory without a line break
    -- (Yes, this happens)  However, only worry about "says" or "asks".  
    if (string.find(triggeredLine, " says") or string.find(triggeredLine, " asks")) then
        return
    end

    local shipType = ""
    local shipName = ""
    
    shipType, shipName = parseShip(0, triggeredLine)
    addShip(shipType, shipName)

end

-- Parse 2 ships in a text line.
function grabShips(triggeredLine)
    EnableTrigger("endCaptureNoShip",true)

    --Note("--"..triggeredLine)

    local shipType = ""
    local shipName = ""
    local ind = 0
    
    -- ship 1
    shipType, shipName, ind = parseShip(0, triggeredLine)
    addShip(shipType, shipName)

    -- ship 2
    shipType, shipName, ind = parseShip(ind, triggeredLine)
    addShip(shipType, shipName)

end

-----------------------------
--  Ship Display Functions

function displayShips()
    if (shipstackEnabled == "false") then
        return
    end

    if (shipstackFormat == 1) then
        stackShipsFormat1()
    elseif (shipstackFormat == 2) then
        stackShipsFormat2()
    elseif (shipstackFormat == 3) then
        stackShipsFormat3()
    end

    -- since we've displayed them, clear them out now.
    clearList()
end

function stackShipsFormat1()
    if (countShips > 0) then
        AnsiNote(d_yellow.."You see "..countShips.." ships here:")
    end

    local maxLen  = 0
    for i,v in spairs(shipList) do
        local thisLen = string.len(i)
        if (thisLen > maxLen) then maxLen = thisLen end
    end

    maxLen = maxLen + 4  --3 for []: and 1 spaces
    local strFormat = "%-"..maxLen.."s"

    for i,v in spairs(shipList) do
        local currList = d_cyan..string.format(strFormat,"["..i.."]:")

        local firstItem = true
        resetColor()
        for j,w in spairs(shipList[i]) do
            if (firstItem) then 
                firstItem = false 
            else
                currList = currList .. ","
            end
            currList = currList .. " " .. nextColor()..j
        end
        AnsiNote(currList)
    end
end

function stackShipsFormat2()
    local firstItem = true

    if (countShips > 0) then
        AnsiNote(d_yellow.."You see "..countShips.." ships here:")
    end

    local currList = d_yellow
    for i,v in spairs(shipList) do
        if (firstItem) then 
            firstItem = false 
        else
            currList = currList .. ", "
        end

        currList = currList .. i
        
        local count = 0
        for j,w in pairs(shipList[i]) do 
            count = count + 1 
        end
        if (count > 1) then
            currList = currList .. " (x"..count..")"
        end
    end
    AnsiNote(currList)
end

function stackShipsFormat3()
    if (countShips > 0) then
        AnsiNote(d_yellow.."You see "..countShips.." ships here.")
    end
end


Note("")
Note("[Galaban's Ship Stacker loaded.]")
Note("")

]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="Galabans_Ship_Stacker:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
